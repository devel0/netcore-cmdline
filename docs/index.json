{
  "README.html": {
    "href": "README.html",
    "title": "netcore-cmdline | netcore-cmdline",
    "keywords": "netcore-cmdline .NET core command line parser API Documentation Changelog Features Quickstart Basic flags Flags with value Parameters Parameters array Bash completion Sub parser API Documentation how this project was built Features multi level nested command parsers mandatory/optional short/long flags with/without value ; global flags parameter and array of parameters automatic standard usage ( color supported ) automatic bash completions Quickstart dotnet new console --use-program-main -n test cd test dotnet add package netcore-cmdline dotnet run Basic flags to execute example-01 from command line can set path with something like export PATH=$PATH:~/opensource/netcore-cmdline/examples/example-01/bin/Debug/netcoreapp3.0 using SearchAThing; namespace example_01 { class Program { static void Main(string[] args) { // create main parser CmdlineParser.Create(\"sample application\", (parser) => { var xflag = parser.AddShort(\"x\", \"my first flag\"); var yflag = parser.AddShort(\"y\", \"my second flag\"); // global flag with auto invoked action when matches that print usage for nested MatchParser parser.AddShort(\"h\", \"show usage\", null, (item) => item.MatchParser.PrintUsage()); // entrypoint for parser level cmdline match parser.OnCmdlineMatch(() => { if (xflag) System.Console.WriteLine($\"x flag used\"); if (yflag) System.Console.WriteLine($\"y flag used\"); }); // call this once at toplevel parser only parser.Run(args); }); } } } Flags with value using SearchAThing; namespace example_01 { class Program { static void Main(string[] args) { CmdlineParser.Create(\"sample application\", (parser) => { var xflag = parser.AddShort(\"x\", \"my first flag\", \"XVAL\"); var yflag = parser.AddShort(\"y\", \"my second flag\", \"YVAL\"); var vflag = parser.AddShortLong(\"v\", \"value\", \"a value flag\", \"VAL\"); parser.AddShortLong(\"h\", \"help\", \"show usage\", null, (item) => item.MatchParser.PrintUsage()); parser.OnCmdlineMatch(() => { if (xflag) System.Console.WriteLine($\"x flag used [{(string)xflag}]\"); if (yflag) System.Console.WriteLine($\"y flag used [{(string)yflag}]\"); if (vflag) System.Console.WriteLine($\"value specified [{(string)vflag}]\"); }); parser.Run(args); }); } } } devel0@tuf:~$ example-01 -h Usage: example-01 FLAGS sample application Optional flags: -x=XVAL my first flag -y=YVAL my second flag -v,--value=VAL a value flag Global flags: -h,--help show usage devel0@tuf:~$ example-01 -x 1 -y 2 -v 3 x flag used [1] y flag used [2] value specified [3] devel0@tuf:~$ example-01 -x 1 -y 2 --value 3 x flag used [1] y flag used [2] value specified [3] devel0@tuf:~$ example-01 -x 1 -y 2 -v=3 x flag used [1] y flag used [2] value specified [3] devel0@tuf:~$ example-01 -x 1 -y 2 --value=3 x flag used [1] y flag used [2] value specified [3] Parameters using SearchAThing; namespace example_01 { class Program { static void Main(string[] args) { CmdlineParser.Create(\"sample application\", (parser) => { var xflag = parser.AddShort(\"x\", \"test flag\"); var param1 = parser.AddParameter(\"param1\", \"first parameter\"); var param2 = parser.AddParameter(\"param2\", \"second parameter\"); parser.AddShort(\"h\", \"show usage\", null, (item) => item.MatchParser.PrintUsage()); parser.OnCmdlineMatch(() => { System.Console.WriteLine(parser); }); parser.Run(args); }); } } } devel0@tuf:~$ example-01 -x a bcd TYPE SHORT-NAME LONG-NAME DESCRIPTION GLOBAL MANDATORY MATCHES VALUE -------------------------------------------------------------------------------------------- flag x test flag X flag h show usage X parameter param1 first parameter X a parameter param2 second parameter X bcd Parameters array using SearchAThing; using System.Linq; namespace example_01 { class Program { static void Main(string[] args) { CmdlineParser.Create(\"sample application\", (parser) => { var xflag = parser.AddShort(\"x\", \"test flag\"); var param1 = parser.AddParameter(\"param1\", \"first parameter\"); var param2 = parser.AddParameterArray(\"param2\", \"other params\"); parser.AddShort(\"h\", \"show usage\", null, (item) => item.MatchParser.PrintUsage()); parser.OnCmdlineMatch(() => { System.Console.WriteLine($\"param2 count = {param2.Count()}\"); System.Console.WriteLine(parser); }); parser.Run(args); }); } } } devel0@tuf:~$ example-01 a param2 count = 0 TYPE SHORT-NAME LONG-NAME DESCRIPTION GLOBAL MANDATORY MATCHES VALUE ------------------------------------------------------------------------------------------------ flag x test flag flag h show usage X parameter param1 first parameter X a parameterArray param2 other params devel0@tuf:~$ example-01 a b c param2 count = 2 TYPE SHORT-NAME LONG-NAME DESCRIPTION GLOBAL MANDATORY MATCHES VALUE ------------------------------------------------------------------------------------------------------ flag x test flag flag h show usage X parameter param1 first parameter X a parameterArray param2 other params X [ \"b\",\"c\" ] Bash completion using SearchAThing; using System.Linq; namespace example_01 { class Program { static void Main(string[] args) { CmdlineParser.Create(\"sample application\", (parser) => { var cmd1 = parser.AddCommand(\"cmd1\", \"sample command 1\"); var cmd2 = parser.AddCommand(\"cmd2\", \"sample command 2\"); var flag1 = parser.AddShortLong(\"f1\", \"test-flag1\", \"sample flag 1\"); var flag2 = parser.AddShortLong(\"f2\", \"test-flag2\", \"sample flag 2\"); var flag3 = parser.AddShortLong(\"f3\", \"my-flag3\", \"sample flag 3\"); parser.AddShort(\"h\", \"show usage\", null, (item) => item.MatchParser.PrintUsage()); var param = parser.AddParameter(\"item\", \"an odd number between 51 and 63\"); param.OnCompletion((str) => { var validSet = Enumerable.Range(50, 15).Where(r => r % 2 != 0).Select(w => w.ToString()); return validSet.Where(r => r.StartsWith(str)); }); parser.Run(args); }); } } } debugging devel0@tuf:~$ SHOW_COMPLETIONS=2 example-01 cmd1 cmd2 devel0@tuf:~$ SHOW_COMPLETIONS=2 example-01 cmd2 51 53 55 57 59 61 63 devel0@tuf:~$ SHOW_COMPLETIONS=2 example-01 cmd2 5 51 53 55 57 59 devel0@tuf:~$ SHOW_COMPLETIONS=2 example-01 cmd2 6 61 63 devel0@tuf:~$ SHOW_COMPLETIONS=2 example-01 cmd2 63 devel0@tuf:~$ apply to bash completions edit /etc/bash_completion.d/example-01 as follow ( note ${COM_LINE:2} to skip first dummy arg that is friendly name of the program ) _fn() { #echo >> /tmp/completion-debug #echo \"COMP_LINE=${COMP_LINE}\" >> /tmp/completion-debug #SHOW_COMPLETIONS=2 example-01 ${COMP_LINE:2} >> /tmp/completion-debug COMPREPLY=($(SHOW_COMPLETIONS=2 example-01 ${COMP_LINE:2})) } complete -F _fn example-01 source it with . /etc/bash_completion then try as follows Sub parser using SearchAThing; namespace example_01 { class Program { static void Main(string[] args) { CmdlineParser.Create(\"sample application\", (parser) => { var cmdConfig = parser.AddCommand(\"config\", \"configuration\", (pConfig) => { pConfig.AddCommand(\"show\", \"show current config\", (pConfigShow) => { pConfigShow.OnCmdlineMatch(() => System.Console.WriteLine($\"showing configuration...\")); }); pConfig.AddCommand(\"update\", \"update config item\", (pConfigUpdate) => { var param = pConfigUpdate.AddMandatoryParameter(\"var=value\", \"assign value to var\"); pConfigUpdate.OnCmdlineMatch(() => { System.Console.WriteLine($\"setting [{(string)param}]\"); }); }); }); // standard --help variant parser.AddShortLong(\"h\", \"help\", \"show usage\", null, (item) => item.MatchParser.PrintUsage()); parser.Run(args); }); } } } API Documentation API how this project was built mkdir netcore-cmdline cd netcore-cmdline dotnet new sln dotnet new classlib -n netcore-cmdline cd netcore-cmdline dotnet add package netcore-util cd .. dotnet sln add netcore-cmdline mkdir examples cd examples dotnet new console -n example-01 cd example-01 dotnet add reference ../../netcore-cmdline cd .. cd .. dotnet sln add examples/example-01 dotnet restore dotnet build"
  },
  "api/SearchAThing.Cmdline.CmdlineArgument.html": {
    "href": "api/SearchAThing.Cmdline.CmdlineArgument.html",
    "title": "Class CmdlineArgument | netcore-cmdline",
    "keywords": "Class CmdlineArgument Namespace SearchAThing.Cmdline Assembly netcore-cmdline.dll Encloses command line argument string and relate to matching parse item if any public class CmdlineArgument Inheritance object CmdlineArgument Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CmdlineArgument(string) construct a cmdline argument from cmdline arg string public CmdlineArgument(string arg) Parameters arg string Properties Argument cmdline argument string public string Argument { get; } Property Value string Matched true if a parser item matches public bool Matched { get; } Property Value bool"
  },
  "api/SearchAThing.Cmdline.CmdlineColors.html": {
    "href": "api/SearchAThing.Cmdline.CmdlineColors.html",
    "title": "Class CmdlineColors | netcore-cmdline",
    "keywords": "Class CmdlineColors Namespace SearchAThing.Cmdline Assembly netcore-cmdline.dll cmdline color configurator; action fields can be changed to customize if foreground, background should changed public class CmdlineColors Inheritance object CmdlineColors Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Commands color for commands public Action Commands Field Value Action Description color for parser description public Action Description Field Value Action Error color for error reporting when parser doesn't matches public Action Error Field Value Action Flags color for flags public Action Flags Field Value Action FriendlyName color for assembly friendly name in the usage line public Action FriendlyName Field Value Action Parameter color for parameter public Action Parameter Field Value Action"
  },
  "api/SearchAThing.Cmdline.CmdlineParseItem.html": {
    "href": "api/SearchAThing.Cmdline.CmdlineParseItem.html",
    "title": "Class CmdlineParseItem | netcore-cmdline",
    "keywords": "Class CmdlineParseItem Namespace SearchAThing.Cmdline Assembly netcore-cmdline.dll describe properties required for a command, a flag or a parameter on the syntax for the cmdline parser; enumerating returns the list of values if this is a flag with value or a parameter or a parameter array public class CmdlineParseItem : IEnumerable<string>, IEnumerable Inheritance object CmdlineParseItem Implements IEnumerable<string> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ArgValues original cmdline argument associated as value to this item (may a flag with value or parameter) public IReadOnlyList<CmdlineArgument> ArgValues { get; } Property Value IReadOnlyList<CmdlineArgument> Description description for this parse item to use in the usage or is parser description if this is a command public string Description { get; } Property Value string GlobalFlagAction stores actiont to execute if this global flag item matches public Action<CmdlineParseItem> GlobalFlagAction { get; } Property Value Action<CmdlineParseItem> GlobalFlagActionNested if false global flag action will executed immeditaly; if true execution will deferred to nested parser public bool GlobalFlagActionNested { get; } Property Value bool HasLongName states if this element has a long name ( used only for flags ) public bool HasLongName { get; } Property Value bool HasShortName true if this item has a short name ( maybe a command, parameter or a flag with short name ) public bool HasShortName { get; } Property Value bool HasValueName states if this flag requires a value public bool HasValueName { get; } Property Value bool IsCommand true if this is a command public bool IsCommand { get; } Property Value bool IsFlag true if this is a flag public bool IsFlag { get; } Property Value bool IsGlobal states if this parse item is a global flag public bool IsGlobal { get; } Property Value bool IsParameter true if this is a parameter public bool IsParameter { get; } Property Value bool IsParameterArray true is this is an array of parameters public bool IsParameterArray { get; } Property Value bool IsParameterOrArray true if this is a parameter or array of parameters public bool IsParameterOrArray { get; } Property Value bool LongFlag states if this item have a long name ( used only for flags ) public string LongFlag { get; } Property Value string LongName long name ( used only for flags ) public string LongName { get; } Property Value string Mandatory true if this item is mandatory public bool Mandatory { get; } Property Value bool MatchArgument original argument with that this parse item matches public CmdlineArgument MatchArgument { get; } Property Value CmdlineArgument MatchParser used to distinguish sub parser for global flags public CmdlineParser MatchParser { get; } Property Value CmdlineParser Matches states if this flag have a matching with required usage public bool Matches { get; } Property Value bool Parser parser which this item belongs to public CmdlineParser Parser { get; } Property Value CmdlineParser ShortFlag short flag final string ( without value if any ) public string ShortFlag { get; } Property Value string ShortLongFlag short/long flag final string ( without value if any ) public string ShortLongFlag { get; } Property Value string ShortName short name of this element public string ShortName { get; } Property Value string SortOrder helper to sort items in groups with follow order Commands, Flags, Parameters, Parameters array public int SortOrder { get; } Property Value int Type type of this cmdline parser public CmdlineParseItemType Type { get; } Property Value CmdlineParseItemType ValueName symbolic name for the flag value to display in the usage public string ValueName { get; } Property Value string Values values associated to this item (may a flag with value or parameter) public IReadOnlyList<string> Values { get; } Property Value IReadOnlyList<string> Methods GetEnumerator() public IEnumerator<string> GetEnumerator() Returns IEnumerator<string> OnCompletion(Func<string, IEnumerable<string>>) set a runtime completion function ( used for parameter item types ) public void OnCompletion(Func<string, IEnumerable<string>> func) Parameters func Func<string, IEnumerable<string>> Operators implicit operator bool(CmdlineParseItem) helper to check if this parse item meet usage rules public static implicit operator bool(CmdlineParseItem item) Parameters item CmdlineParseItem Returns bool implicit operator string(CmdlineParseItem) helper to retrieve this item value ( used for flag value or single parameter ) public static implicit operator string(CmdlineParseItem item) Parameters item CmdlineParseItem Returns string"
  },
  "api/SearchAThing.Cmdline.CmdlineParseItemType.html": {
    "href": "api/SearchAThing.Cmdline.CmdlineParseItemType.html",
    "title": "Enum CmdlineParseItemType | netcore-cmdline",
    "keywords": "Enum CmdlineParseItemType Namespace SearchAThing.Cmdline Assembly netcore-cmdline.dll types for cmd line parser item public enum CmdlineParseItemType Fields command = 0 command if present are mandatory to match one between commands at this parser level flag = 1 flag can be short, long or short/long and optional or mandatory; flag can require to have value association parameter = 2 parameter can be optional or mandatory and are discovered after commands, flags are parsed parameterArray = 3 parameter array are strings at end of cmdline"
  },
  "api/SearchAThing.Cmdline.CmdlineParser.html": {
    "href": "api/SearchAThing.Cmdline.CmdlineParser.html",
    "title": "Class CmdlineParser | netcore-cmdline",
    "keywords": "Class CmdlineParser Namespace SearchAThing.Cmdline Assembly netcore-cmdline.dll cmdline parser tool public class CmdlineParser Inheritance object CmdlineParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties AllFlags inherited and this parser flags public IEnumerable<CmdlineParseItem> AllFlags { get; } Property Value IEnumerable<CmdlineParseItem> AllItems parent and this items public IEnumerable<CmdlineParseItem> AllItems { get; } Property Value IEnumerable<CmdlineParseItem> AppVersion app version utility public string AppVersion { get; } Property Value string Colors colors set ( this can be changed from the Create method ) public CmdlineColors Colors { get; } Property Value CmdlineColors Command command that activate this parser public CmdlineParseItem Command { get; } Property Value CmdlineParseItem Commands this parser commands public IEnumerable<CmdlineParseItem> Commands { get; } Property Value IEnumerable<CmdlineParseItem> Description description of this parser ( automatically retrieved from command if this is a subparser ) public string Description { get; } Property Value string Flags this parser flags public IEnumerable<CmdlineParseItem> Flags { get; } Property Value IEnumerable<CmdlineParseItem> FriendlyName assembly friendly name ( used for Usage ) public string FriendlyName { get; } Property Value string GlobalFlags global flags public IEnumerable<CmdlineParseItem> GlobalFlags { get; } Property Value IEnumerable<CmdlineParseItem> InheritedFlags only parent parsers flags public IEnumerable<CmdlineParseItem> InheritedFlags { get; } Property Value IEnumerable<CmdlineParseItem> InheritedItems only parents items public IEnumerable<CmdlineParseItem> InheritedItems { get; } Property Value IEnumerable<CmdlineParseItem> Items this (sub)parser items public IReadOnlyList<CmdlineParseItem> Items { get; } Property Value IReadOnlyList<CmdlineParseItem> ParameterArrays parameter with array mode public IEnumerable<CmdlineParseItem> ParameterArrays { get; } Property Value IEnumerable<CmdlineParseItem> Parameters parameters public IEnumerable<CmdlineParseItem> Parameters { get; } Property Value IEnumerable<CmdlineParseItem> ParametersOrArray all parameters single or array mode public IEnumerable<CmdlineParseItem> ParametersOrArray { get; } Property Value IEnumerable<CmdlineParseItem> Parent parent parset ( null for topmost parser ) public CmdlineParser Parent { get; } Property Value CmdlineParser ParentParsers parent parsers enum public IEnumerable<CmdlineParser> ParentParsers { get; } Property Value IEnumerable<CmdlineParser> ParserPath list of parser from topmost to this one public IEnumerable<CmdlineParser> ParserPath { get; } Property Value IEnumerable<CmdlineParser> RootParser topmost parser public CmdlineParser RootParser { get; } Property Value CmdlineParser Methods AddCommand(string, string, Action<CmdlineParser>) add a command item to this parser public CmdlineParseItem AddCommand(string name, string description, Action<CmdlineParser> builder = null) Parameters name string name of the command description string description of the command ( for the usage ) builder Action<CmdlineParser> an optional builder to create a subparser from this command Returns CmdlineParseItem AddLong(string, string, string, Action<CmdlineParseItem>, bool) add optional long flag public CmdlineParseItem AddLong(string name, string description, string valueName = null, Action<CmdlineParseItem> globalFlagAction = null, bool globalFlagActionNested = true) Parameters name string description string valueName string globalFlagAction Action<CmdlineParseItem> globalFlagActionNested bool Returns CmdlineParseItem AddMandatoryLong(string, string, string) add mandatory long flag public CmdlineParseItem AddMandatoryLong(string name, string description, string valueName = null) Parameters name string description string valueName string Returns CmdlineParseItem AddMandatoryParameter(string, string) add mandatory parameter item to this parser public CmdlineParseItem AddMandatoryParameter(string name, string description) Parameters name string name of this parameter ( used in Usage ) description string description of this parameter ( used in Usage ) Returns CmdlineParseItem AddMandatoryParameterArray(string, string) add mandatory parameter array item to this parser public CmdlineParseItem AddMandatoryParameterArray(string name, string description) Parameters name string name of this parameter array ( used in Usage ) description string description of this parameter array ( used in Usage ) Returns CmdlineParseItem AddMandatoryShort(string, string, string) add mandatory short flag public CmdlineParseItem AddMandatoryShort(string name, string description, string valueName = null) Parameters name string description string valueName string Returns CmdlineParseItem AddMandatoryShortLong(string, string, string, string) add mandatory short/long flag public CmdlineParseItem AddMandatoryShortLong(string shortName, string longName, string description, string valueName = null) Parameters shortName string longName string description string valueName string Returns CmdlineParseItem AddParameter(string, string) add optional parameter item to this parser public CmdlineParseItem AddParameter(string name, string description) Parameters name string name of this parameter ( used in Usage ) description string description of this parameter ( used in Usage ) Returns CmdlineParseItem AddParameterArray(string, string) add optional parameter array item to this parser public CmdlineParseItem AddParameterArray(string name, string description) Parameters name string name of this parameter array ( used in Usage ) description string description of this parameter array ( used in Usage ) Returns CmdlineParseItem AddShort(string, string, string, Action<CmdlineParseItem>, bool) add optional short flag public CmdlineParseItem AddShort(string name, string description, string valueName = null, Action<CmdlineParseItem> globalFlagAction = null, bool globalFlagActionNested = true) Parameters name string description string valueName string globalFlagAction Action<CmdlineParseItem> globalFlagActionNested bool Returns CmdlineParseItem AddShortLong(string, string, string, string, Action<CmdlineParseItem>, bool) add optional short/long flag public CmdlineParseItem AddShortLong(string shortName, string longName, string description, string valueName = null, Action<CmdlineParseItem> globalFlagAction = null, bool globalFlagActionNested = true) Parameters shortName string longName string description string valueName string globalFlagAction Action<CmdlineParseItem> globalFlagActionNested bool Returns CmdlineParseItem Create(string, Action<CmdlineParser>, CmdlineColors, bool) create main parser public static CmdlineParser Create(string description, Action<CmdlineParser> builder, CmdlineColors colors, bool unescapeArguments) Parameters description string program description builder Action<CmdlineParser> action to configure and run the parser colors CmdlineColors custom color object or null to disable unescapeArguments bool true to unescape arguments ( eg. newlines in argument strings ) Returns CmdlineParser Create(string, Action<CmdlineParser>, bool, bool) create main parser public static CmdlineParser Create(string description, Action<CmdlineParser> builder, bool useColors = true, bool unescapeArguments = false) Parameters description string program description builder Action<CmdlineParser> action to configure and run the parser useColors bool true to use colors unescapeArguments bool true to unescape arguments ( eg. newlines in argument strings ) Returns CmdlineParser OnCmdlineMatch(Action) set action to execute when this parser cmdline matches public void OnCmdlineMatch(Action action) Parameters action Action PrintUsage() print the usage based on current parser configuration public void PrintUsage() Run(string[]) execute the parser ( must called once from top parser builder ) public void Run(string[] args) Parameters args string[] ToString() build a table with all parser item details, matches and parsed values ( for debug purpose ) public override string ToString() Returns string"
  },
  "api/SearchAThing.Cmdline.CmdlineUsage.html": {
    "href": "api/SearchAThing.Cmdline.CmdlineUsage.html",
    "title": "Class CmdlineUsage | netcore-cmdline",
    "keywords": "Class CmdlineUsage Namespace SearchAThing.Cmdline Assembly netcore-cmdline.dll cmdline parser helper public class CmdlineUsage Inheritance object CmdlineUsage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CmdlineUsage(CmdlineParser) construct a cmdline usage associated to given parser public CmdlineUsage(CmdlineParser parser) Parameters parser CmdlineParser Properties Parser parser which this usage belongs to public CmdlineParser Parser { get; } Property Value CmdlineParser Methods Print() print usage to console public void Print()"
  },
  "api/SearchAThing.Cmdline.html": {
    "href": "api/SearchAThing.Cmdline.html",
    "title": "Namespace SearchAThing.Cmdline | netcore-cmdline",
    "keywords": "Namespace SearchAThing.Cmdline Classes CmdlineArgument Encloses command line argument string and relate to matching parse item if any CmdlineColors cmdline color configurator; action fields can be changed to customize if foreground, background should changed CmdlineParseItem describe properties required for a command, a flag or a parameter on the syntax for the cmdline parser; enumerating returns the list of values if this is a flag with value or a parameter or a parameter array CmdlineParser cmdline parser tool CmdlineUsage cmdline parser helper Enums CmdlineParseItemType types for cmd line parser item"
  },
  "index.html": {
    "href": "index.html",
    "title": "netcore-opengl | netcore-cmdline",
    "keywords": "netcore-opengl api sources"
  }
}